commands:
minikube start --driver docker --force --cpus 2 --memory 8192
minikube profile list
minikube node list
minikube node delete minikube-m02
kubectl get pods -A
kubectl get pods -A -o wide длинная инфа 
kubectl get svc -A
minikube ssh - консоль кластера
minikube addons list
minikube addons enable dashboard - веб интерфейс кубернетес
minikube addons enable metrics-server
kubectl port-forward --address 0.0.0.0 --namespace kubernetes-dashboard svc/kubernetes-dashboard 8080:80  #прокидываем порт на дашбоард
kubectl api-versions
kubectl api-resources
kubectl explain pod/svc/...

sudo nano /root/.kube/config файл конфига кластера

sudo kubectl config view - смотрим какие конфиги есть

kubectl config set-cluster <cluster> \
--server=https://<ip>:8443 \
--certificate-authority=<path to cert>

kubectl config unset clusters.<name>

kubectl config set-credentials <user> \
--client-certificate=<cert-file> \
--client-key=<key-file>

kubectl config unset users.<user>

kubectl config set-context <context> \
--cluster=<cluster> \
--user=<user> \
--namespace=<namespace>

kubectl config unset contexts.<name>

sudo kubectl config get-contexts

kubectl config use-context <name>

kubectl config current-context

kubectl config view --minify укоротить до текущего контекста если много контекстов

kubectx is a utility to manage and switch between kubectl contexts. Repo is
github.com/ahmetb/kubectx

cubectx amazon-context переключиться на контекст amazon-context
kubectx minikube переключиться на контекст minikube

kubectl version - версия клиента и сервера kubectl

kubectl cluster-info инфа о кластере
kubectl cluster-info dump - развернутая инфа о кластере в json

kubectl get nodes - получить список нод из данного контекста
kubectl describe nodes ip-10-0-1-115.eu-central-1.compute.internal - инфа о ноде

kubectl get componentstatuses - статус компонентов (для дебага)


создать под и выполнить команду из файла pod-test-command.yaml
kubectl apply -f pod-test-command.yaml



cat pod-test-command.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: pod-test-command
spec:
  containers:
    - name: busybox-container
      image: busybox
      imagePullPolicy: IfNotPresent
      command:
        - /bin/sh
      args:
        - "-c"
        - |
          echo Start
          for i in 1 2 3;
            do
            ls -l /
            sleep 1
          done
          echo Finish
  restartPolicy: Never





kubectl get namespaces

kubectl create namespace lol

kubectl delete namespace lol

kubectl apply -f namespace.yaml - из файла 



igi@igi-msi:~/Downloads$ cat namespace.yaml 
kind: Namespace
apiVersion: v1
metadata:
  name: lol
  
  

kubectl apply -f test-pod.yaml --namespace=lol

если удаляем namespace, то удаляется все его содержимое вместе с ним

kubens - быстрое переключение на namespaces (https://github.com/ahmetb/kubectx)

kubelive - прога для интерактивного отображения namespaces и их содержимого

kubectl delete pod <pod>
kubectl delete -f pod.yaml

kubectl logs -c <container name> - логи контейнера

kubectl exec <pod> [-c container] [-i] [-t] -- <command>

kubectl exec -it two-containers -c nginx-container -- /bin/bash

kubectl cp <src> <dest> [-c container]
kubectl cp script.sh command-continuous:/tmp

kubectl port-forward <pod> [locahost-port:]<pod-port> прокинуть порт в контейнер

kubectl describe pod two-containers

kubectl logs two-containers -c debian-container
kubectl logs two-containers -c nginx-containers

kubectl logs command-continuous --follow 

kubectl cp command-continuous:/tmp/message.txt message.txt

-------
https://github.com/kubernetes/kubectl/issues/454   копирование файлов из остановленных контейнеров

Обходные пути:

Залезть на узел и через docker забрать файлы https://stackoverflow.com/questions/34429757/how-to-copy-file-to-stopped-docker-container

Держать запущенным ещё один процесс, чтобы контейнер не падал (осторожно)
-------


https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ мультиконтейнеры

kubectl get pod pod-test-command -o yaml инфа в ямле

--------------

apiVersion: v1
kind: Pod
metadata:
  name: command-continuous
spec:
  containers:
    - name: busybox-container
      image: bash

      lifecycle:
        preStop:
          exec:
            command: ["kill","-SIGUSR1","1"]

      command:
        - /bin/sh
      args:
        - "-c"
        - |
          trap "echo USR1; sleep 2; exit" USR1
          echotime() {
          echo $(date +'%Y.%m.%d %H:%M:%S') $@
          }
          echotime Starting
          for i in $(seq 1 100); do
            echotime "i=$i"
            sleep 1
          done
  restartPolicy: OnFailure

-------------

https://docs.docker.com/engine/reference/commandline/kill/ 

kubectl get pod lol -o yaml > lol.yaml запущенный под конвертим в конфиг файл, из него можно потом запустить новый под.


minikube addons enable metrics-server - включаем сервер метрик
утилита k9s - полное управление кластером

утилита yq - парсер. 
kubectl get pods pod-test-command -o yaml | yq e -

-----------------------------------                                                                
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-min-max-demo-lr
spec:
  limits:
  - max:
      cpu: "800m"
    min:
      cpu: "200m"
    type: Container
---
apiVersion: v1
kind: Pod
metadata:
  name: cpu-fine
spec:
  containers:
    - name: ctr
      image: vish/stress
      imagePullPolicy: IfNotPresent
      args: ["-cpus", "1"]

-------------------------------------

kubectl get limits
kubectl api-resources | grep Range
kubectl delete limits cpu-min-max-demo-lr

kubectl get pod --show-labels

kubectl get pod -l ver=alpha
kubectl label pods frontend-pod ver=alpha ver=beta --overwrite
kubectl get pod -l ver=beta

NAME           READY   STATUS    RESTARTS   AGE     LABELS
cpu-fine       1/1     Running   0          8m56s   tier=backend,ver=alpha
frontend-pod   1/1     Running   0          10m     test=true,tier=frontend,ver=beta

kubectl label pod frontend-pod test-

kubectl label pods frontend-pod debug=

аннотации:
kubectl get pods 123 -o yaml | less
kubectl annotate pod frontend-pod owner=me


replica sets:

kubectl describe rs <pod>

kubectl scale rs frontend --replicas 0

--------------------
igi@igi-msi:~/Downloads/kubernets-training/files/rs$ kubectl get rs
NAME       DESIRED   CURRENT   READY   AGE
frontend   3         3         3       59s
igi@igi-msi:~/Downloads/kubernets-training/files/rs$ kubectl get rs -o wide
NAME       DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES   SELECTOR
frontend   3         3         3       74s   nginx        nginx    tier=frontend
igi@igi-msi:~/Downloads/kubernets-training/files/rs$ get pod -l tier=frontend

Command 'get' not found, but there are 18 similar ones.

igi@igi-msi:~/Downloads/kubernets-training/files/rs$ kubectl get pod -l tier=frontend
NAME             READY   STATUS    RESTARTS   AGE
frontend-g4rnk   1/1     Running   0          2m3s
frontend-pod     1/1     Running   0          34m
frontend-w5dkx   1/1     Running   0          2m3s
-----------------------------

kubectl get rs
kubectl get rs -o wide
kubectl get pod -l tier=frontend
kubectl delete rs frontend


kubectl delete pod -l tier
